package vcluster.elements;

/**
 * A class representing a virtual machine 
 */
public class Vm extends Element{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer uId;
	private String id;
	private VMState state;
	private String memory;
	private String user;
	private String hostname;
	private String time;
	private String ucpu;
	private String group;
	private String cloudName;
	private String privateIP;
	private String pubicIP;
	private int isIdle;
	
	/**
	 *Constructor, initialize an instance of virtual machine as the default members' value. 
	 */
	public Vm() {		
		this.uId = null;
		this.id = "";
		this.state = VMState.PENDING;
		this.memory = "";
		this.user = "";
		this.hostname = "host1";
		this.time = "";
		this.ucpu = "";
		this.group = "";
		this.cloudName = "";
		this.privateIP="";
		this.pubicIP="";
		this.isIdle = 3;
	}
	
	/**
	 *Get the global Id
	 *@return uId, the global id in vcluster 
	 */
	public Integer getuId() {
		return uId;
	}

	 /**
	  *Set the global Id 
	  *@param uId, the global id in vcluster. 
	  */
	public void setuId(Integer uId) {
		this.uId = uId;
	}
	
	/**
	 *Get the private IP of the virtual machine.
	 *@return privateIp, the private IP of the virtual machine.
	 */
	public String getPrivateIP() {
		return privateIP;
	}


	/**
	 *Set the private IP of the virtual machine.
	 *@param privateIp, the private IP of the virtual machine.
	 */
	public void setPrivateIP(String privateIP) {
		this.privateIP = privateIP;
	}


	/**
	 *Get the public IP of the virtual machine.
	 *@return publicIP, the public IP of the virtual machine.
	 */
	public String getPubicIP() {
		return pubicIP;
	}


	/**
	 *Set the public IP of the virtual machine.
	 *@param publicIP, the public IP of the virtual machine.
	 */
	public void setPubicIP(String pubicIP) {
		this.pubicIP = pubicIP;
	}

	/**
	 *Get the internal ID of virtual machine, this is the ID that identify the virtual machine in the real cloud system. It's generated by cloud.
	 *@return id, the internal ID of the virtual machine
	 */
	public String getId() {
		return id;
	}
	
	/**
	 *Set the internal ID of virtual machine, this is the ID that identify the virtual machine in the real cloud system. It's generated by cloud.
	 *@param id, the internal ID of the virtual machine
	 */
	public void setId(String id) {
		this.id = id;
	}
	
	/**
	 *Get the virtual machine's status 
	 *@return state, the status of a virtual machine,
	 *@see VMState
	 */
	public VMState getState() {
		return state;
	}
	
	/**
	 *Set the virtual machine's status
	 *@param state, the status of a virtual machine.
	 *@see VMState 
	 */
	public void setState(VMState state) {
		this.state = state;
	}
	
	/**
	 *Get the memory size of the virtual machine.
	 *@return memory, the memory size of the virtual machine.
	 */
	public String getMemory() {
		return memory;
	}
	
	/**
	 *Set the memory size of the virtual machine.
	 *@param memory, the memory size of the virtual machine.
	 */
	public void setMemory(String memory) {
		this.memory = memory;
	}
	
	/**
	 *Get the user of the virtual machine.
	 *@return user, the user of the virtual machine.
	 */
	public String getUser() {
		return user;
	}
	/**
	 *Set the user of the virtual machine.
	 *@param user, the user of the virtual machine.
	 */
	public void setUser(String user) {
		this.user = user;
	}
	
	/**
	 *Get the host name of the virtual machine.
	 *@return hostname, the host name of the virtual machine.
	 *@see hostname.
	 */
	public String getHostname() {
		return hostname;
	}
	
	/**
	 *Set the host name of the virtual machine.
	 *@param hostname, the host name of the virtual machine.
	 *@see hostname.
	 */
	public void setHostname(String hostname) {
		
		this.hostname = hostname;
	}
	
	/**
	 *Get the launch time of the virtual machine.
	 *@return time, the launch time of the virtual machine.
	 *@see time.
	 */
	public String getTime() {
		return time;
	}
	
	/**
	 *Set the launch time of the virtual machine.
	 *@param time, the launch time of the virtual machine.
	 *@see time.
	 */
	public void setTime(String time) {
		this.time = time;
	}
	
	/**
	 *Get the usage percentage of the virtual machine.
	 *@return ucpu, the usage percentage of the virtual machine.
	 *@see ucpu.
	 */
	public String getUcpu() {
		return ucpu;
	}
	
	/**
	 *Set the usage percentage of the virtual machine.
	 *@param ucpu, the usage percentage of the virtual machine.
	 *@see ucpu.
	 */
	public void setUcpu(String ucpu) {
		this.ucpu = ucpu;
	}
	
	/**
	 *Get the group that the virtual machine belongs to.
	 *@return group, the group of the virtual machine belongs to.
	 *@see group.
	 */
	public String getGroup() {
		return group;
	}
	
	/**
	 *Set the group that the virtual machine belongs to.
	 *@param group, the group of the virtual machine belongs to.
	 *@see group.
	 */
	public void setGroup(String group) {
		this.group = group;
	}
	
	/**
	 *Get the name of the cloud that the virtual machine belongs to.
	 *@return cloudName, the name of the cloud of the virtual machine belongs to.
	 *@see cloudName.
	 *@see Cloud
	 */
	public String getCloudName() {
		return cloudName;
	}
	
	/**
	 *Set the name of the cloud that the virtual machine belongs to.
	 *@param cloudName, the name of the cloud of the virtual machine belongs to.
	 *@see cloudName.
	 *@see Cloud
	 */
	public void setCloudName(String cloudName) {
		this.cloudName = cloudName;
	}
	
	
	/**
	 *Get the activity status of the virtual machine,idle or busy.
	 *@return isIdle, the value is a integer number, 0 represents idle, 1 represents busy and 3 represents vcluster failed to get the information. 
	 */
	public int isIdle() {
		// TODO Auto-generated method stub
		return this.isIdle;
	}
	
	/**
	 *Set the activity status of the virtual machine,idle or busy.
	 *@param isIdle, the value is a integer number, 0 represents idle, 1 represents busy and 3 represents vcluster failed to get the information. 
	 */
	public void setIsIdle(int isIdle) {
		this.isIdle = isIdle;
		this.state = VMState.RUNNING;
	}

	
	/**
	 *	Return virtual machine's status as String form.
	 */

	public String stringVMState() {
		
		switch(state) {
		case PENDING: return "PENDING";
		case RUNNING: return "RUNNING";
		case STOP: return "STOP";
		case SUSPEND: return "SUSPEND";
		case PROLOG: return "PROLOG";
		case FAILED: return "FAILED";
		case NOT_DEFINED: return "NOT_DEFINED";
		}
		return "NOT_DEFINED";
	}	
	public VMState toState(String str){
		if(str.equalsIgnoreCase("prolog"))return VMState.PROLOG;
		else if(str.equalsIgnoreCase("running"))return VMState.RUNNING;
		else if(str.equalsIgnoreCase("suspend"))return VMState.SUSPEND;
		else if(str.equalsIgnoreCase("pending"))return VMState.PENDING;
		else if(str.equalsIgnoreCase("stop"))return VMState.STOP;
		else if(str.equalsIgnoreCase("failed"))return VMState.FAILED;		
		
		return VMState.NOT_DEFINED;
	}
	public enum VMState {STOP, PENDING, RUNNING, SUSPEND, PROLOG, NOT_DEFINED, FAILED }; 
}
